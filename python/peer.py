# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _peer
else:
    import _peer

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def getVerbose():
    return _peer.getVerbose()

def setVerbose(verbose):
    return _peer.setVerbose(verbose)
class cWNodeSparse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pi = property(_peer.cWNodeSparse_pi_get, _peer.cWNodeSparse_pi_set)
    lpi = property(_peer.cWNodeSparse_lpi_get, _peer.cWNodeSparse_lpi_set)
    lpi_off = property(_peer.cWNodeSparse_lpi_off_get, _peer.cWNodeSparse_lpi_off_set)
    C = property(_peer.cWNodeSparse_C_get, _peer.cWNodeSparse_C_set)
    Coff = property(_peer.cWNodeSparse_Coff_get, _peer.cWNodeSparse_Coff_set)
    CovPriorDiag = property(_peer.cWNodeSparse_CovPriorDiag_get, _peer.cWNodeSparse_CovPriorDiag_set)
    tauOn = property(_peer.cWNodeSparse_tauOn_get, _peer.cWNodeSparse_tauOn_set)
    tauOff = property(_peer.cWNodeSparse_tauOff_get, _peer.cWNodeSparse_tauOff_set)

    def __init__(self, *args):
        _peer.cWNodeSparse_swiginit(self, _peer.new_cWNodeSparse(*args))

    def update(self, net):
        return _peer.cWNodeSparse_update(self, net)
    __swig_destroy__ = _peer.delete_cWNodeSparse

# Register cWNodeSparse in _peer:
_peer.cWNodeSparse_swigregister(cWNodeSparse)

class cEpsNodeSparse(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, dim, pa, pb, E1):
        _peer.cEpsNodeSparse_swiginit(self, _peer.new_cEpsNodeSparse(dim, pa, pb, E1))

    def update(self, net):
        return _peer.cEpsNodeSparse_update(self, net)
    __swig_destroy__ = _peer.delete_cEpsNodeSparse

# Register cEpsNodeSparse in _peer:
_peer.cEpsNodeSparse_swigregister(cEpsNodeSparse)

class PEER(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _peer.PEER_swiginit(self, _peer.new_PEER())
    __swig_destroy__ = _peer.delete_PEER

    def setSigmaOff(self, sigma_off):
        return _peer.PEER_setSigmaOff(self, sigma_off)

    def getSigmaOff(self):
        return _peer.PEER_getSigmaOff(self)

    def getNj(self):
        return _peer.PEER_getNj(self)

    def getNp(self):
        return _peer.PEER_getNp(self)

    def getNk(self):
        return _peer.PEER_getNk(self)

    def getNc(self):
        return _peer.PEER_getNc(self)

    def getNmax_iterations(self):
        return _peer.PEER_getNmax_iterations(self)

    def getTolerance(self):
        return _peer.PEER_getTolerance(self)

    def getVarTolerance(self):
        return _peer.PEER_getVarTolerance(self)

    def getAdd_mean(self):
        return _peer.PEER_getAdd_mean(self)

    def getPriorEpsA(self):
        return _peer.PEER_getPriorEpsA(self)

    def getPriorEpsB(self):
        return _peer.PEER_getPriorEpsB(self)

    def getPriorAlphaA(self):
        return _peer.PEER_getPriorAlphaA(self)

    def getPriorAlphaB(self):
        return _peer.PEER_getPriorAlphaB(self)

    def setSparsityPrior(self, matrix):
        return _peer.PEER_setSparsityPrior(self, matrix)

    def getSparsityPrior(self):
        return _peer.PEER_getSparsityPrior(self)

    def getZ(self):
        return _peer.PEER_getZ(self)

    def setNk(self, Nk):
        return _peer.PEER_setNk(self, Nk)

    def setAdd_mean(self, add_mean):
        return _peer.PEER_setAdd_mean(self, add_mean)

    def setNmax_iterations(self, Nmax_iterations):
        return _peer.PEER_setNmax_iterations(self, Nmax_iterations)

    def setTolerance(self, tolerance):
        return _peer.PEER_setTolerance(self, tolerance)

    def setVarTolerance(self, tolerance):
        return _peer.PEER_setVarTolerance(self, tolerance)

    def setPriorAlphaA(self, pa):
        return _peer.PEER_setPriorAlphaA(self, pa)

    def setPriorAlphaB(self, pb):
        return _peer.PEER_setPriorAlphaB(self, pb)

    def setPriorEpsA(self, pa):
        return _peer.PEER_setPriorEpsA(self, pa)

    def setPriorEpsB(self, pb):
        return _peer.PEER_setPriorEpsB(self, pb)

    def setPriorAlpha(self, pa, pb):
        return _peer.PEER_setPriorAlpha(self, pa, pb)

    def setPriorEps(self, pa, pb):
        return _peer.PEER_setPriorEps(self, pa, pb)

    def init_net(self):
        return _peer.PEER_init_net(self)

    def calcBound(self):
        return _peer.PEER_calcBound(self)

    def logprob(self):
        return _peer.PEER_logprob(self)

    def update(self):
        return _peer.PEER_update(self)

    def setPhenoMean(self, matrix):
        return _peer.PEER_setPhenoMean(self, matrix)

    def setPhenoVar(self, matrix):
        return _peer.PEER_setPhenoVar(self, matrix)

    def setCovariates(self, matrix):
        return _peer.PEER_setCovariates(self, matrix)

    def getPhenoMean(self):
        return _peer.PEER_getPhenoMean(self)

    def getPhenoVar(self):
        return _peer.PEER_getPhenoVar(self)

    def getCovariates(self):
        return _peer.PEER_getCovariates(self)

    def getX(self):
        return _peer.PEER_getX(self)

    def getW(self):
        return _peer.PEER_getW(self)

    def getEps(self):
        return _peer.PEER_getEps(self)

    def getAlpha(self):
        return _peer.PEER_getAlpha(self)

    def getResiduals(self):
        return _peer.PEER_getResiduals(self)

    def getBounds(self):
        return _peer.PEER_getBounds(self)

    def getResidualVars(self):
        return _peer.PEER_getResidualVars(self)

    def init_net_sparse(self):
        return _peer.PEER_init_net_sparse(self)

# Register PEER in _peer:
_peer.PEER_swigregister(PEER)



